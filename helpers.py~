from settings import *
import copy


WRITE = OUT_FILE.write if WRITE_TO_FILE else print
TAGS = [1] * 15





'''
WRITE PATTERN:
1.  <subj> passive_verb
2.  <subj> active_verb
3.  <subj> active_verb dobj
4.  <subj> verb infinitive
5.  <subj> auxbe noun
6.  <subj> auxhave noun

7.  active_verb <dobj>
8.  infinitive <dobj>
9.  verb infinitive <dobj>
10. noun auxbe <dobj>
11. noun auxhave <dobj>

12. infinitive prep <np>
13. active_verb prep <np>
14. passive_verb prep <np>
15. noun prep <np>

16. premod <noun>
'''
def write_pattern(case, outs, p1s, p2s = [""], active = False):
    for out in outs:
        for p1 in p1s:
            for p2 in p2s:
                if 1 <= case <= 15:
                    tag = "_" + str(TAGS[case - 1])
                if case == 1:
                    WRITE(out + " * <subj>_PassVp__" + p1 + tag)
                elif case == 2:
                    WRITE(out + " * <subj>_ActVp__" + p1 + "_" + tag)
                elif case == 3:
                    WRITE(out + " * <subj>_ActVp_Dobj__" + p1 + "_" + p2 + tag)
                elif case == 4:
                    if not active:
                        WRITE(out + " * <subj>_PassInfVp__" + p1 + "_" + p2 + tag)
                    else:
                        WRITE(out + " * <subj>_ActInfVp__" + p1 + "_" + p2 + tag)
                elif case == 5 or case == 6:
                    WRITE(out + " * <subj>_AuxVp_Dobj__" + p1 + "_" + p2 + tag)
                elif case == 7:
                    WRITE(out + " * ActVp_<dobj>__" + p1 + tag)
                elif case == 8:
                    WRITE(out + " * infinitive_verb_<dobj>__" + p1 + tag)
                elif case == 9:
                    if not active:
                        WRITE(out + " * PassInfVp_<dobj>__" + p1 + "_" + p2 + tag)
                    else:
                        WRITE(out + " * ActInfVp_<dobj>__" + p1 + "_" + p2 + tag)
                elif case == 10 or case == 11:
                    WRITE(out + " * Subj_AuxVp_<dobj>__" + p1 + "_" + p2 + tag)
                elif case == 12:
                    WRITE(out + " * InfVp_Prep_<NP>__" + p1 + "_" + p2 + tag)
                elif case == 13:
                    WRITE(out + " * ActVp_Prep_<NP>__" + p1 + "_" + p2 + tag)
                elif case == 14:
                    WRITE(out + " * PassVp_Prep_<NP>__" + p1 + "_" + p2 + tag)
                elif case == 15:
                    WRITE(out + " * Np_Prep_<NP>__" + p1 + "_" + p2 + tag)
                elif case == 16:
                    WRITE(out + " * " + p1 + "_premod")

                if 1 <= case <= 15:
                    TAGS[case - 1] += 1

                if WRITE_TO_FILE:
                    WRITE("\n")





'''
HELPER METHODS
'''
def find_np(token):
    doc = get_doc(token)
    index_list = find_np_rec(token, [[]], 0)
    for l in index_list:
        l.sort()

    separator = ' '
    return list(map(lambda l : \
                    separator.join(list(map(lambda i : get_text(get_token(doc, i)), l))), index_list))
    
def find_np_rec(token, index_list, np_num):
    new_list = copy.deepcopy(index_list)
    new_list[np_num].append(get_index(token))
    
    for c in get_children(token):
        c_dep = get_dep(c)
        if c_dep in NP:
            new_list = find_np_rec(c, new_list, np_num)
        elif c_dep in PREP and (get_text(c).upper() == "OF" or get_text(c).upper() == "FOR"):
            for p in get_children(c):
                if get_dep(p) in POBJ:
                    new_list[np_num].append(get_index(c))
                    new_list = find_np_rec(p, new_list, np_num)
        elif (c_dep in CONJ) or (c_dep in APPOS):
            new_list.append(index_list[np_num])
            new_list = find_np_rec(c, new_list, len(new_list) - 1)
    return new_list

def find_vp(token):
    doc = get_doc(token)
    index_list = find_vp_rec(token, [[]], 0)
    for l in index_list:
        l.sort()
    separator = '_'
    return list(map(lambda l :
                    separator.join(list(map(lambda i :
                                            get_text(get_token(doc, i)), l))), index_list))
    
def find_vp_rec(token, index_list, vp_num):
    index_list[vp_num].append(get_index(token))
    for c in get_children(token):
        c_dep = get_dep(c)
        if c_dep in VP:
            index_list = find_vp_rec(c, index_list, vp_num)
    return index_list

def find_conj_text(token):
    return list(map(lambda t : get_text(t), find_conj(token)))

def find_conj(token):
    for c in get_children(token):
        if get_dep(c) in CONJ:
            return [token] + find_conj(c)
    return [token]
